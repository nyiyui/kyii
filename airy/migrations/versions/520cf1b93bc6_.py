"""empty message

Revision ID: 520cf1b93bc6
Revises: 
Create Date: 2023-03-21 16:02:22.292319

"""
from alembic import op
import sqlalchemy_utils
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '520cf1b93bc6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('group',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('slug', sa.String(length=128), nullable=False),
    sa.Column('name', sa.Unicode(length=256), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('email',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verify_token', sa.String(length=256), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('verify_token')
    )
    op.create_table('group_perms',
    sa.Column('group_id', sa.String(length=32), nullable=False),
    sa.Column('perm_name', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'perm_name')
    )
    op.create_table('user',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('slug', sa.String(length=128), nullable=True),
    sa.Column('name', sa.Unicode(length=256), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('email_id', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['email_id'], ['email.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('af',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('name', sa.Unicode(length=256), nullable=True),
    sa.Column('user_id', sa.String(length=32), nullable=False),
    sa.Column('verifier', sa.String(length=64), nullable=False),
    sa.Column('params', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('state', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('gen_done', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ap',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('name', sa.Unicode(length=256), nullable=True),
    sa.Column('user_id', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('log_entry',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('renderer', sa.String(length=32), nullable=True),
    sa.Column('sid2', sa.String(length=64), nullable=True),
    sa.Column('data', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('user_id', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('oauth2_client',
    sa.Column('client_id', sa.String(length=48), nullable=True),
    sa.Column('client_secret', sa.String(length=120), nullable=True),
    sa.Column('client_id_issued_at', sa.Integer(), nullable=False),
    sa.Column('client_secret_expires_at', sa.Integer(), nullable=False),
    sa.Column('client_metadata', sa.Text(), nullable=True),
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('user_id', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('oauth2_client', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_oauth2_client_client_id'), ['client_id'], unique=False)

    op.create_table('oauth2_code',
    sa.Column('code', sa.String(length=120), nullable=False),
    sa.Column('client_id', sa.String(length=48), nullable=True),
    sa.Column('redirect_uri', sa.Text(), nullable=True),
    sa.Column('response_type', sa.Text(), nullable=True),
    sa.Column('scope', sa.Text(), nullable=True),
    sa.Column('nonce', sa.Text(), nullable=True),
    sa.Column('auth_time', sa.Integer(), nullable=False),
    sa.Column('code_challenge', sa.Text(), nullable=True),
    sa.Column('code_challenge_method', sa.String(length=48), nullable=True),
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('user_id', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('user_groups',
    sa.Column('user_id', sa.String(length=32), nullable=False),
    sa.Column('group_id', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.create_table('ap_reqs',
    sa.Column('ap_id', sa.String(length=32), nullable=False),
    sa.Column('af_id', sa.String(length=32), nullable=False),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['af_id'], ['af.id'], ),
    sa.ForeignKeyConstraint(['ap_id'], ['ap.id'], ),
    sa.PrimaryKeyConstraint('ap_id', 'af_id')
    )
    op.create_table('oauth2_token',
    sa.Column('token_type', sa.String(length=40), nullable=True),
    sa.Column('access_token', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('scope', sa.Text(), nullable=True),
    sa.Column('issued_at', sa.Integer(), nullable=False),
    sa.Column('access_token_revoked_at', sa.Integer(), nullable=False),
    sa.Column('refresh_token_revoked_at', sa.Integer(), nullable=False),
    sa.Column('expires_in', sa.Integer(), nullable=False),
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('user_id', sa.String(length=32), nullable=True),
    sa.Column('client_id', sa.String(length=48), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['oauth2_client.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('access_token')
    )
    with op.batch_alter_table('oauth2_token', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_oauth2_token_refresh_token'), ['refresh_token'], unique=False)

    op.create_table('user_login',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('name', sa.Unicode(length=256), nullable=True),
    sa.Column('user_id', sa.String(length=32), nullable=False),
    sa.Column('sid2', sa.String(length=64), nullable=True),
    sa.Column('extra', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('against_id', sa.String(length=32), nullable=True),
    sa.Column('attempt', sa.DateTime(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('last', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('reason_end', sa.String(length=32), nullable=True),
    sa.Column('token_hash', sa.String(length=512), nullable=True),
    sa.ForeignKeyConstraint(['against_id'], ['ap.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_login')
    with op.batch_alter_table('oauth2_token', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_oauth2_token_refresh_token'))

    op.drop_table('oauth2_token')
    op.drop_table('ap_reqs')
    op.drop_table('user_groups')
    op.drop_table('oauth2_code')
    with op.batch_alter_table('oauth2_client', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_oauth2_client_client_id'))

    op.drop_table('oauth2_client')
    op.drop_table('log_entry')
    op.drop_table('ap')
    op.drop_table('af')
    op.drop_table('user')
    op.drop_table('group_perms')
    op.drop_table('email')
    op.drop_table('group')
    # ### end Alembic commands ###
